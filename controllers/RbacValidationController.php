<?php
/**
 * Created by PhpStorm.
 * User: josegomez
 * Date: 19/12/2016
 * Time: 01:18 PM
 */

namespace backend\modules\rbac\controllers;

use Yii;
use yii\web\Controller;
use yii\filters\AccessControl;

class RbacValidationController extends Controller
{
    /**
     * @var array
     */
    private $jsonPermissionsFile;
    private $permissionsList = [];
    private $roleName;
    private $additionalBehavior;
    private $excludedActions = [];


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->jsonPermissionsFile = (Yii::$app->modules['rbac']->jsonPermissionsPath) ?? null;
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        $permissions = $this->getPermissions();
        $behaviors = [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        "allow" => $permissions['allow'],
                        'actions' => $permissions['actions'],
                        'roles' => $permissions['roles']
                    ],
                ]
            ],
        ];

        if (is_array($this->additionalBehavior) && !empty($this->additionalBehavior)) {
            if (isset($this->additionalBehavior["rules"])) {
                $tempRules = $behaviors["access"]["rules"];
                $behaviors["access"]["rules"] = [];

                foreach ($this->additionalBehavior["rules"] as $rule) {
                    if (!empty($rule)) {
                        $behaviors["access"]["rules"][] = $rule;
                    }
                }

                $behaviors["access"]["rules"][] = $tempRules[0];
                unset($this->additionalBehavior["rules"]);
            }

            $behaviors = array_merge($behaviors, $this->additionalBehavior);
        }

        if (is_array($this->excludedActions) && !empty($this->excludedActions)) {
            $behaviors["access"]["rules"][] = [
                "allow" => true,
                "actions" => $this->excludedActions
            ];
        }
        return $behaviors;
    }

    /**
     * @param $rules
     * @return array
     */
    public function setExcludedActions($rules)
    {
        if (is_array($rules) && isset($rules['actions'])) {
            $this->excludedActions = $rules["actions"];
            return $this->excludedActions;
        }
        return [];
    }

    /**
     * @return array
     */
    public function setRole($role, $user_id)
    {
        if ((!empty($role)) && (!empty($user_id))) {
            $explode = explode('\\', $role);
            $role_name = sprintf('%s_%s', $explode[count($explode) - 1], $user_id);
            $this->roleName = $role_name;
        } else {
            $this->roleName = "@";
        }
        return $this->roleName;
    }

    /**
     * @param $behavior
     * @return array
     */
    public function setAdditional($behavior)
    {
        $access = [];
        if (is_array($behavior) && !empty($behavior)) {
            $this->additionalBehavior = $behavior;
            if (isset($this->additionalBehavior["access"]) && is_array($this->additionalBehavior)) {
                $this->additionalBehavior["rules"] = $this->additionalBehavior["access"]["rules"];
                unset($this->additionalBehavior["access"]);
            }
        }
        return $this->additionalBehavior;
    }

    /**
     * @param $user_id
     * @return array
     */
    public function getPermissionsByUser($user_id)
    {
        $auth = \Yii::$app->authManager;
        $permissions = [];
        try {
            $roles = $auth->getRolesByUser($user_id);
        } catch (\Exception $e) {
            $auth->revokeAll($user_id);
            return [];
        }
        foreach ($roles as $key => $role) {
            $permission = $auth->getPermissionsByRole($key);
            foreach ($permission as $action => $permissionObj) {
                $permissions[$key][$action] = 1;
            }
        }
        return $permissions;
    }

    /**
     * @return mixed
     */
    protected function getAvailablePermissionsByJSON()
    {
        if (file_exists($this->jsonPermissionsFile)) {
            $json = file_get_contents($this->jsonPermissionsFile);
            return json_decode($json, true);
        }
        return [];
    }

    /**
     * @return array
     */
    public function getPermissions()
    {
        $auth = \Yii::$app->authManager;
        $permissions = $auth->getPermissionsByRole($this->roleName);
        $this->permissionsList = [];
        if ($permissions) {
            foreach ($permissions as $key => $permission) {
                $this->permissionsList['actions'][] = $key;
            }
            $this->permissionsList['roles'] = [$this->roleName];
            $this->permissionsList['allow'] = true;
        } else {
            $this->permissionsList['roles'] = [];
            $this->permissionsList['allow'] = false;
            $this->permissionsList['actions'] = [];
        }

        return $this->permissionsList;
    }

    /**
     * @param $permissions
     * @return bool|int
     */
    public function removePermissionByRole($permissions)
    {
        if (!empty($permissions) && is_array($permissions)) {
            $auth = \Yii::$app->authManager;
            $permissionsOnRole = $auth->getPermissionsByRole($permissions['role']);
            if (isset($permissionsOnRole[$permissions['permission']])) {
                $role = $auth->getRole($permissions['role']);
                if ($role) {
                    $permission = $auth->getPermission($permissions['permission']);
                    return $auth->removeChild($role, $permission);
                }
            }
            return 0;
        } else {
            return 0;
        }
    }

    /**
     * @param $permissions
     * @return int
     */
    public function assingPermissionByUser($permissions)
    {
        if (!is_array($permissions)) {
            return 0;
        }
        $auth = \Yii::$app->authManager;
        $userRole = $auth->getRole($permissions['role']);

        if (!$userRole) {
            $userRole = $auth->createRole($permissions['role']);
            $auth->add($userRole);
        }

        foreach ($permissions['permissions'] as $permission) {
            $permissionExist = $auth->getPermission($permission);
            if ($permissionExist) {
                if (!in_array($permissionExist, $auth->getPermissionsByRole($userRole->name))) {
                    $auth->addChild($userRole, $permissionExist);
                }
            } else {
                $newPermission = $auth->createPermission($permission);
                $newPermission->description = $permission;
                $auth->add($newPermission);
                $auth->addChild($userRole, $newPermission);
            }
        }
        if (!$auth->getAssignment($userRole->name, $permissions['user_id'])) {
            $auth->assign($userRole, $permissions['user_id']);
        }
        return 1;
    }

    /**
     * @inheritdoc
     */
    /**
     * @param $permissions
     * @param $id
     * Asinga permisos mediante un arreglo
     * Logica definina en RbacValidationController
     */



    protected function assingPermissions($permissions, $id)
    {
        if (isset($permissions["permissions"])) {
            foreach ($permissions['permissions'] as $key => $value) {
                $this->assingPermissionByUser([
                    "role" => $key . "_" . $id,
                    "user_id" => $id,
                    "permissions" => array_keys($value)
                ]);
            }
        }
    }

    /**
     * @param $currentPermissions
     * @param $id
     * Comprueba en base a la peticion que permisos fueron removidos
     * comparando con la coleccion de permisos en json
     * Logica definina en RbacValidationController
     */
    protected function removePermissions($currentPermissions, $id)
    {
        $availablepermissions = $this->getAvailablePermissionsByJSON();
        $removedPermissions = [];
        foreach ($availablepermissions["permissions"] as $key => $value) {
            foreach ($value['actions'] as $permission) {
                if (isset($currentPermissions["permissions"][$key])) {
                    if (!in_array($permission, $currentPermissions["permissions"][$key])) {
                        $removedPermissions[$key][] = $permission;
                    }
                } else {
                    $removedPermissions[$key][] = $permission;
                }
            }
        }
        if (!empty($removedPermissions)) {
            foreach ($removedPermissions as $role => $permission) {
                foreach ($permission as $action) {
                    $this->removePermissionByRole([
                        'role' => $role."_".$id,
                        'permission' => $action
                    ]);
                }
            }
        }
    }
}
